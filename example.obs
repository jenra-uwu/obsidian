struct Vec {
    len: usize,
    cap: usize,
    ptr: *mut 'a
}

enum Error : u8 {
    SomeError,
    SomeOtherError = 2,
    Idk
}

fn new(vals: ...'a) [Vec['a]] {
    let mut vec = Vec { len: 0, cap: 0, ptr: null };
    for! ($val) in (iter(vals)) {
        vec.push(val);
    };
    vec
}

fn drop(vec: Vec['a]) {
    for! ($v) in (iter (vec)) {
        drop(v);
    };
    dealloc(vec.values);
}

macro! {
    for! (pat) in (val) {
        expr
    }
} {
    try! {
        loop! (pat) (val) {
            expr;
            continue! (val);
        }
    } catch ($IterEnd {}) {}
};

macro! {
    while! (cond) {
        expr
    } else {
        else
    }
} {
    loop! {
        if! (cond) {
            expr;
        } else {
            break! (else);
        }
    }
};

macro! {
    while! (cond) {
        expr
    }
} {
    loop! {
        if! (cond) {
            expr;
        } else {
            break!;
        }
    }
};

fn main() {
    let mut vec = new(10, 20, 30, 40);
    // defer! (vec.drop());

    try! {
        stuff;
    } catch ($IterEnd {}) {
        do_stuff();
    } catch ($Overflow {}) {
        do_something();
    } catch ($_) {
        oh_no();
    };

    match! (vec) {
        case! ($_) {
            do_something()
        };
        case! ($(a | b)) {
            do_something()
        };
    };

    while! (true) {
        println("uwu");
    };

    while! (true) {
        println("uwu");
        break!
    } else { false };
}
