{
(struct (Vec T)
    (length usize)
    (capacity usize)
    (values (*mut T)))

(struct (VecSlice T 'a)
    (start usize)
    (end usize)
    (vec (& 'a (Vec T))))

(fn (slice T 'a) (vec (& 'a (Vec T))) (start usize) (end usize)
    (VecSlice
        start
        end
        vec))

(enum ExampleEnum
    (Variant1 0)
    Variant2
    Variant3
    (Variant4 42))

(type String (Vec u8))

(struct (VecIter T 'a)
    (vec (& 'a (Vec T)))
    (index usize))

(fn (iter T 'a) (self (& 'a (Vec T))) (VecIter T 'a)
    (VecIter self 0))

(struct IterEnd)

(struct OutOfBounds
    (index usize)
    (bound usize))

(fn (next T 'a) (self (& (VecIter T 'a))) (& T)
    (with v (get (. self vec) (. self index))
        v
    (on (OutOfBounds _ _)
        (throw IterEnd))))

(struct (Enumerate T)
    (iter T)
    (index usize))

(struct (Pair T U)
    (first T)
    (second U))

(fn (next T U) (self (& (Enumerate T))) (Pair usize U)
    (Pair (+= (. self index) 1) (next (. self iter))))

(fn (push T) (self (&mut (Vec T))) (value T) ()
    (seq
        (if (>= (. self length) (. self capacity))
            (realloc (&mut (. self values)) (*= (. self capacity) 2)))
        (set (+ (. self values) (+= (. self length) 1)) value)))

(fn (get T) (self (& (Vec T))) (index isize) (& T)
    (seq
        (let (mut index) index)
        (if (< index 0)
            (set index (- (. self length) index)))
        (if (ord 0 index (. self length))
            (* (+ (. self values) index))
        else (throw (OutOfBounds index (. self length))))))

(fn (new T) (vals (... T)) (Vec T)
    (seq
        (let (mut vec) (Vec 0 0 null))
        (for val (iter vals)
            (push vec val))
        vec))

}

(macro for
    (v i s) (seq
        (let (mut iter) i)
        (loop v (next iter)
            (seq
                s
                (continue (next iter))))))

(macro while
    (con stats) (loop
        (if con
            stats
        else break)))

(fn main
    (seq
        (let (mut vec) (new 10 20 30 40))
        (for v (iter vec)
            (println v))
        (try
            (stuff)
        catch (IterEnd)
            (do stuff)
        catch (Overflow)
            (do stuff)
        catch _
            (do stuff))
        (while true
            (println "uwu"))
        (json
            \\ {
            \\     "owo": [1, 2, 3],
            \\     "uwu": {
            \\         "nya": nil,
            \\         ":3": "x"
            \\     }
            \\ }
        )))

